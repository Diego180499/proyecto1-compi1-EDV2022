/* The following code was generated by JFlex 1.4.3 on 12/8/22, 4:09 PM */

package analizadores;

import java.io.*;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/8/22, 4:09 PM from the specification file
 * <tt>J:/Universidad/Vaqueras-Guate/Compi 1/Laboratorio/PROYECTOS/Proyecto1/proyecto1/src/analizadores/Lexer.flex</tt>
 */
public class MiLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\7\1\5\2\0\1\7\22\0\1\7\1\0\1\56\4\0"+
    "\1\57\1\52\1\53\1\6\1\41\1\46\1\42\1\50\1\4\12\1"+
    "\1\51\1\47\1\43\1\45\1\44\2\0\32\2\4\0\1\3\1\0"+
    "\1\10\1\11\1\15\1\25\1\16\1\27\1\35\1\20\1\23\1\40"+
    "\1\17\1\30\1\36\1\22\1\21\1\33\1\2\1\14\1\12\1\13"+
    "\1\24\1\26\1\32\1\37\1\31\1\34\1\54\1\0\1\55\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\22\3"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\0\1\3\1\27\35\3\1\30\1\31\1\32\6\3"+
    "\1\33\14\3\1\0\15\3\1\34\5\3\1\35\14\3"+
    "\1\36\3\3\1\37\1\3\1\40\16\3\1\41\13\3"+
    "\1\42\1\3\1\43\1\3\1\44\1\45\11\3\1\46"+
    "\1\3\1\47\3\3\1\50\1\3\1\51\4\3\1\52"+
    "\1\3\1\53\6\3\1\54\6\3\1\55\5\3\1\56"+
    "\6\3\1\57\1\60\5\3\1\61\1\3\1\62\1\63"+
    "\5\3\1\64\2\3\1\65\3\3\1\66\1\3\1\67"+
    "\1\3\1\70\1\71\11\3\1\72\2\3\1\73\5\3"+
    "\1\74\2\3\1\75\1\76\1\77\5\3\1\100\1\3"+
    "\1\101\1\102\1\103\1\104\1\105\1\106\1\3\1\107"+
    "\2\3\1\110\1\3\1\111\6\3\1\112\1\113\4\3"+
    "\1\114\3\3\1\115\2\3\1\116\3\3\1\117\11\3"+
    "\1\120\1\121\1\3\1\122\1\123\1\124\1\3\1\125"+
    "\1\126\1\3\1\127\1\130\1\131\1\132\1\133\1\3"+
    "\1\134\1\3\1\135\1\3\1\136\2\3\1\137\1\140"+
    "\1\141\1\142\1\143";

  private static int [] zzUnpackAction() {
    int [] result = new int[352];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\60\0\u0120"+
    "\0\u0150\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0"+
    "\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0420"+
    "\0\u0450\0\60\0\60\0\60\0\60\0\60\0\60\0\60"+
    "\0\60\0\60\0\60\0\60\0\60\0\60\0\60\0\60"+
    "\0\u0480\0\u04b0\0\u04e0\0\220\0\u0510\0\u0540\0\u0570\0\u05a0"+
    "\0\u05d0\0\u0600\0\u0630\0\u0660\0\u0690\0\u06c0\0\u06f0\0\u0720"+
    "\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0810\0\u0840\0\u0870\0\u08a0"+
    "\0\u08d0\0\u0900\0\u0930\0\u0960\0\u0990\0\u09c0\0\u09f0\0\u0a20"+
    "\0\u0a50\0\220\0\u0a80\0\220\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40"+
    "\0\u0b70\0\u0ba0\0\u0bd0\0\u0c00\0\u0c30\0\u0c60\0\u0c90\0\u0cc0"+
    "\0\u0cf0\0\u0d20\0\u0d50\0\u0d80\0\u0db0\0\u0de0\0\u0e10\0\u0e40"+
    "\0\u0e70\0\u0ea0\0\u0ed0\0\u0f00\0\u0f30\0\u0f60\0\u0f90\0\u0fc0"+
    "\0\u0ff0\0\u1020\0\u1050\0\u1080\0\u10b0\0\220\0\u10e0\0\u1110"+
    "\0\u1140\0\u1170\0\u11a0\0\220\0\u11d0\0\u1200\0\u1230\0\u1260"+
    "\0\u1290\0\u12c0\0\u12f0\0\u1320\0\u1350\0\u1380\0\u13b0\0\u13e0"+
    "\0\220\0\u1410\0\u1440\0\u1470\0\220\0\u14a0\0\u14d0\0\u1500"+
    "\0\u1530\0\u1560\0\u1590\0\u15c0\0\u15f0\0\u1620\0\u1650\0\u1680"+
    "\0\u16b0\0\u16e0\0\u1710\0\u1740\0\u1770\0\u17a0\0\u17d0\0\u1800"+
    "\0\u1830\0\u1860\0\u1890\0\u18c0\0\u18f0\0\u1920\0\u1950\0\u1980"+
    "\0\u19b0\0\60\0\u19e0\0\220\0\u1a10\0\220\0\220\0\u1a40"+
    "\0\u1a70\0\u1aa0\0\u1ad0\0\u1b00\0\u1b30\0\u1b60\0\u1b90\0\u1bc0"+
    "\0\220\0\u1bf0\0\220\0\u1c20\0\u1c50\0\u1c80\0\220\0\u1cb0"+
    "\0\220\0\u1ce0\0\u1d10\0\u1d40\0\u1d70\0\220\0\u1da0\0\220"+
    "\0\u1dd0\0\u1e00\0\u1e30\0\u1e60\0\u1e90\0\u1ec0\0\220\0\u1ef0"+
    "\0\u1f20\0\u1f50\0\u1f80\0\u1fb0\0\u1fe0\0\220\0\u2010\0\u2040"+
    "\0\u2070\0\u20a0\0\u20d0\0\220\0\u2100\0\u2130\0\u2160\0\u2190"+
    "\0\u21c0\0\u21f0\0\220\0\220\0\u2220\0\u2250\0\u2280\0\u22b0"+
    "\0\u22e0\0\220\0\u2310\0\220\0\220\0\u2340\0\u2370\0\u23a0"+
    "\0\u23d0\0\u2400\0\220\0\u2430\0\u2460\0\220\0\u2490\0\u24c0"+
    "\0\u24f0\0\220\0\u2520\0\220\0\u2550\0\220\0\220\0\u2580"+
    "\0\u25b0\0\u25e0\0\u2610\0\u2640\0\u2670\0\u26a0\0\u26d0\0\u2700"+
    "\0\220\0\u2730\0\u2760\0\220\0\u2790\0\u27c0\0\u27f0\0\u2820"+
    "\0\u2850\0\220\0\u2880\0\u28b0\0\220\0\220\0\220\0\u28e0"+
    "\0\u2910\0\u2940\0\u2970\0\u29a0\0\220\0\u29d0\0\220\0\220"+
    "\0\220\0\220\0\220\0\220\0\u2a00\0\220\0\u2a30\0\u2a60"+
    "\0\220\0\u2a90\0\220\0\u2ac0\0\u2af0\0\u2b20\0\u2b50\0\u2b80"+
    "\0\u2bb0\0\220\0\220\0\u2be0\0\u2c10\0\u2c40\0\u2c70\0\220"+
    "\0\u2ca0\0\u2cd0\0\u2d00\0\220\0\u2d30\0\u2d60\0\220\0\u2d90"+
    "\0\u2dc0\0\u2df0\0\220\0\u2e20\0\u2e50\0\u2e80\0\u2eb0\0\u2ee0"+
    "\0\u2f10\0\u2f40\0\u2f70\0\u2fa0\0\220\0\220\0\u2fd0\0\220"+
    "\0\220\0\220\0\u3000\0\220\0\220\0\u3030\0\220\0\220"+
    "\0\220\0\220\0\220\0\u3060\0\220\0\u3090\0\220\0\u30c0"+
    "\0\220\0\u30f0\0\u3120\0\220\0\220\0\220\0\220\0\220";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[352];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\7\1\6"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\2\4"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\4\1\27\1\30\1\4\1\31\3\4\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\61\0\1\3\57\0"+
    "\3\4\4\0\31\4\23\0\1\51\1\0\1\52\56\0"+
    "\1\6\1\0\1\6\51\0\3\4\4\0\1\4\1\53"+
    "\1\54\26\4\20\0\3\4\4\0\1\55\3\4\1\56"+
    "\4\4\1\57\7\4\1\60\7\4\20\0\3\4\4\0"+
    "\1\4\1\61\1\4\1\62\2\4\1\63\1\4\1\64"+
    "\2\4\1\65\6\4\1\66\6\4\20\0\3\4\4\0"+
    "\4\4\1\67\3\4\1\70\10\4\1\71\7\4\20\0"+
    "\3\4\4\0\6\4\1\72\22\4\20\0\3\4\4\0"+
    "\1\73\7\4\1\74\1\75\6\4\1\76\10\4\20\0"+
    "\3\4\4\0\12\4\1\77\3\4\1\100\1\4\1\101"+
    "\6\4\1\102\1\4\20\0\3\4\4\0\1\4\1\103"+
    "\12\4\1\104\1\4\1\105\4\4\1\106\5\4\20\0"+
    "\3\4\4\0\1\107\5\4\1\110\5\4\1\111\14\4"+
    "\20\0\3\4\4\0\2\4\1\112\7\4\1\113\4\4"+
    "\1\114\6\4\1\115\2\4\20\0\3\4\4\0\2\4"+
    "\1\116\7\4\1\117\1\120\4\4\1\121\10\4\20\0"+
    "\3\4\4\0\6\4\1\122\2\4\1\123\17\4\20\0"+
    "\3\4\4\0\11\4\1\124\1\4\1\125\15\4\20\0"+
    "\3\4\4\0\1\126\10\4\1\127\1\4\1\130\4\4"+
    "\1\131\10\4\20\0\3\4\4\0\11\4\1\132\17\4"+
    "\20\0\3\4\4\0\10\4\1\133\20\4\20\0\3\4"+
    "\4\0\1\134\3\4\1\135\7\4\1\136\14\4\20\0"+
    "\3\4\4\0\11\4\1\137\17\4\17\0\5\51\1\0"+
    "\52\51\4\52\1\0\1\52\1\140\51\52\1\0\3\4"+
    "\4\0\2\4\1\141\26\4\20\0\3\4\4\0\2\4"+
    "\1\142\26\4\20\0\3\4\4\0\6\4\1\143\22\4"+
    "\20\0\3\4\4\0\11\4\1\144\17\4\20\0\3\4"+
    "\4\0\3\4\1\145\25\4\20\0\3\4\4\0\21\4"+
    "\1\146\7\4\20\0\3\4\4\0\1\147\3\4\1\150"+
    "\24\4\20\0\3\4\4\0\1\151\30\4\20\0\3\4"+
    "\4\0\11\4\1\152\17\4\20\0\3\4\4\0\24\4"+
    "\1\153\4\4\20\0\3\4\4\0\13\4\1\154\15\4"+
    "\20\0\3\4\4\0\14\4\1\155\4\4\1\156\7\4"+
    "\20\0\3\4\4\0\4\4\1\157\6\4\1\160\15\4"+
    "\20\0\3\4\4\0\23\4\1\161\5\4\20\0\3\4"+
    "\4\0\1\162\2\4\1\163\13\4\1\164\11\4\20\0"+
    "\3\4\4\0\2\4\1\165\1\166\25\4\20\0\3\4"+
    "\4\0\1\167\5\4\1\170\22\4\20\0\3\4\4\0"+
    "\12\4\1\171\16\4\20\0\3\4\4\0\1\172\30\4"+
    "\20\0\3\4\4\0\14\4\1\173\14\4\20\0\3\4"+
    "\4\0\6\4\1\174\22\4\20\0\3\4\4\0\2\4"+
    "\1\175\26\4\20\0\3\4\4\0\3\4\1\176\17\4"+
    "\1\177\5\4\20\0\3\4\4\0\30\4\1\200\20\0"+
    "\3\4\4\0\3\4\1\201\25\4\20\0\3\4\4\0"+
    "\6\4\1\202\22\4\20\0\3\4\4\0\6\4\1\203"+
    "\22\4\20\0\3\4\4\0\26\4\1\204\2\4\20\0"+
    "\3\4\4\0\22\4\1\205\6\4\20\0\3\4\4\0"+
    "\20\4\1\206\10\4\20\0\3\4\4\0\3\4\1\207"+
    "\25\4\20\0\3\4\4\0\23\4\1\210\5\4\20\0"+
    "\3\4\4\0\10\4\1\211\2\4\1\212\15\4\20\0"+
    "\3\4\4\0\2\4\1\213\2\4\1\214\23\4\20\0"+
    "\3\4\4\0\12\4\1\215\16\4\20\0\3\4\4\0"+
    "\11\4\1\216\17\4\20\0\3\4\4\0\5\4\1\217"+
    "\11\4\1\220\1\221\10\4\20\0\3\4\4\0\14\4"+
    "\1\222\14\4\20\0\3\4\4\0\13\4\1\223\15\4"+
    "\20\0\3\4\4\0\4\4\1\224\24\4\20\0\3\4"+
    "\4\0\20\4\1\225\10\4\20\0\3\4\4\0\4\4"+
    "\1\226\24\4\20\0\3\4\4\0\12\4\1\227\14\4"+
    "\1\230\1\4\20\0\3\4\4\0\11\4\1\231\17\4"+
    "\20\0\3\4\4\0\5\4\1\232\4\4\1\233\16\4"+
    "\20\0\3\4\4\0\13\4\1\234\15\4\20\0\3\4"+
    "\4\0\4\4\1\235\24\4\20\0\3\4\4\0\11\4"+
    "\1\236\1\4\1\237\15\4\20\0\3\4\4\0\1\4"+
    "\1\240\27\4\20\0\3\4\4\0\3\4\1\241\25\4"+
    "\23\0\1\242\54\0\3\4\4\0\3\4\1\243\25\4"+
    "\20\0\3\4\4\0\6\4\1\244\22\4\20\0\3\4"+
    "\4\0\1\245\30\4\20\0\3\4\4\0\20\4\1\246"+
    "\10\4\20\0\3\4\4\0\6\4\1\247\22\4\20\0"+
    "\3\4\4\0\3\4\1\250\25\4\20\0\3\4\4\0"+
    "\3\4\1\251\1\4\1\252\23\4\20\0\3\4\4\0"+
    "\13\4\1\253\1\254\14\4\20\0\3\4\4\0\20\4"+
    "\1\255\10\4\20\0\3\4\4\0\4\4\1\256\24\4"+
    "\20\0\3\4\4\0\6\4\1\257\22\4\20\0\3\4"+
    "\4\0\3\4\1\260\25\4\20\0\3\4\4\0\6\4"+
    "\1\261\22\4\20\0\3\4\4\0\11\4\1\262\17\4"+
    "\20\0\3\4\4\0\2\4\1\263\26\4\20\0\3\4"+
    "\4\0\6\4\1\264\22\4\20\0\3\4\4\0\15\4"+
    "\1\265\13\4\20\0\3\4\4\0\14\4\1\266\14\4"+
    "\20\0\3\4\4\0\6\4\1\267\22\4\20\0\3\4"+
    "\4\0\5\4\1\270\23\4\20\0\3\4\4\0\4\4"+
    "\1\271\24\4\20\0\3\4\4\0\5\4\1\272\23\4"+
    "\20\0\3\4\4\0\2\4\1\273\1\274\25\4\20\0"+
    "\3\4\4\0\2\4\1\275\26\4\20\0\3\4\4\0"+
    "\26\4\1\276\2\4\20\0\3\4\4\0\12\4\1\277"+
    "\16\4\20\0\3\4\4\0\6\4\1\300\22\4\20\0"+
    "\3\4\4\0\6\4\1\301\22\4\20\0\3\4\4\0"+
    "\20\4\1\302\10\4\20\0\3\4\4\0\6\4\1\303"+
    "\22\4\20\0\3\4\4\0\4\4\1\304\24\4\20\0"+
    "\3\4\4\0\4\4\1\305\24\4\20\0\3\4\4\0"+
    "\6\4\1\306\22\4\20\0\3\4\4\0\20\4\1\307"+
    "\10\4\20\0\3\4\4\0\6\4\1\310\22\4\20\0"+
    "\3\4\4\0\20\4\1\311\10\4\20\0\3\4\4\0"+
    "\11\4\1\312\17\4\20\0\3\4\4\0\12\4\1\313"+
    "\16\4\20\0\3\4\4\0\1\314\30\4\20\0\3\4"+
    "\4\0\10\4\1\315\20\4\20\0\3\4\4\0\3\4"+
    "\1\316\25\4\20\0\3\4\4\0\12\4\1\317\16\4"+
    "\20\0\3\4\4\0\13\4\1\320\15\4\20\0\3\4"+
    "\4\0\1\321\30\4\20\0\3\4\4\0\6\4\1\322"+
    "\22\4\20\0\3\4\4\0\1\4\1\323\27\4\20\0"+
    "\3\4\4\0\15\4\1\324\13\4\20\0\3\4\4\0"+
    "\3\4\1\325\25\4\20\0\3\4\4\0\2\4\1\326"+
    "\26\4\20\0\3\4\4\0\6\4\1\327\22\4\20\0"+
    "\3\4\4\0\1\330\30\4\20\0\3\4\4\0\6\4"+
    "\1\331\22\4\20\0\3\4\4\0\1\332\30\4\20\0"+
    "\3\4\4\0\7\4\1\333\21\4\20\0\3\4\4\0"+
    "\25\4\1\334\3\4\20\0\3\4\4\0\20\4\1\335"+
    "\10\4\20\0\3\4\4\0\1\336\30\4\20\0\3\4"+
    "\4\0\3\4\1\337\25\4\20\0\3\4\4\0\16\4"+
    "\1\340\12\4\20\0\3\4\4\0\20\4\1\341\10\4"+
    "\20\0\3\4\4\0\11\4\1\342\17\4\20\0\3\4"+
    "\4\0\4\4\1\343\24\4\20\0\3\4\4\0\7\4"+
    "\1\344\21\4\20\0\3\4\4\0\6\4\1\345\22\4"+
    "\20\0\3\4\4\0\13\4\1\346\15\4\20\0\3\4"+
    "\4\0\7\4\1\347\21\4\20\0\3\4\4\0\12\4"+
    "\1\350\16\4\20\0\3\4\4\0\5\4\1\351\23\4"+
    "\20\0\3\4\4\0\6\4\1\352\22\4\20\0\3\4"+
    "\4\0\3\4\1\353\25\4\20\0\3\4\4\0\11\4"+
    "\1\354\17\4\20\0\3\4\4\0\5\4\1\355\23\4"+
    "\20\0\3\4\4\0\22\4\1\356\6\4\20\0\3\4"+
    "\4\0\11\4\1\357\17\4\20\0\3\4\4\0\11\4"+
    "\1\360\17\4\20\0\3\4\4\0\4\4\1\361\24\4"+
    "\20\0\3\4\4\0\10\4\1\362\20\4\20\0\3\4"+
    "\4\0\7\4\1\363\21\4\20\0\3\4\4\0\3\4"+
    "\1\364\25\4\20\0\3\4\4\0\13\4\1\365\15\4"+
    "\20\0\3\4\4\0\2\4\1\366\26\4\20\0\3\4"+
    "\4\0\3\4\1\367\25\4\20\0\3\4\4\0\4\4"+
    "\1\370\24\4\20\0\3\4\4\0\13\4\1\371\15\4"+
    "\20\0\3\4\4\0\5\4\1\372\23\4\20\0\3\4"+
    "\4\0\4\4\1\373\24\4\20\0\3\4\4\0\1\374"+
    "\30\4\20\0\3\4\4\0\2\4\1\375\26\4\20\0"+
    "\3\4\4\0\4\4\1\376\24\4\20\0\3\4\4\0"+
    "\13\4\1\377\15\4\20\0\3\4\4\0\4\4\1\u0100"+
    "\24\4\20\0\3\4\4\0\25\4\1\u0101\3\4\20\0"+
    "\3\4\4\0\17\4\1\u0102\11\4\20\0\3\4\4\0"+
    "\6\4\1\u0103\22\4\20\0\3\4\4\0\25\4\1\u0104"+
    "\3\4\20\0\3\4\4\0\26\4\1\u0105\2\4\20\0"+
    "\3\4\4\0\14\4\1\u0106\14\4\20\0\3\4\4\0"+
    "\25\4\1\u0107\3\4\20\0\3\4\4\0\20\4\1\u0108"+
    "\10\4\20\0\3\4\4\0\14\4\1\u0109\14\4\20\0"+
    "\3\4\4\0\6\4\1\u010a\22\4\20\0\3\4\4\0"+
    "\1\u010b\30\4\20\0\3\4\4\0\20\4\1\u010c\10\4"+
    "\20\0\3\4\4\0\15\4\1\u010d\13\4\20\0\3\4"+
    "\4\0\3\4\1\u010e\25\4\20\0\3\4\4\0\6\4"+
    "\1\u010f\22\4\20\0\3\4\4\0\26\4\1\u0110\2\4"+
    "\20\0\3\4\4\0\6\4\1\u0111\22\4\20\0\3\4"+
    "\4\0\1\u0112\30\4\20\0\3\4\4\0\13\4\1\u0113"+
    "\15\4\20\0\3\4\4\0\1\u0114\30\4\20\0\3\4"+
    "\4\0\5\4\1\u0115\23\4\20\0\3\4\4\0\1\u0116"+
    "\30\4\20\0\3\4\4\0\25\4\1\u0117\3\4\20\0"+
    "\3\4\4\0\3\4\1\u0118\25\4\20\0\3\4\4\0"+
    "\15\4\1\u0119\13\4\20\0\3\4\4\0\17\4\1\u011a"+
    "\11\4\20\0\3\4\4\0\10\4\1\u011b\20\4\20\0"+
    "\3\4\4\0\17\4\1\u011c\11\4\20\0\3\4\4\0"+
    "\12\4\1\u011d\16\4\20\0\3\4\4\0\12\4\1\u011e"+
    "\16\4\20\0\3\4\4\0\6\4\1\u011f\22\4\20\0"+
    "\3\4\4\0\12\4\1\u0120\16\4\20\0\3\4\4\0"+
    "\12\4\1\u0121\16\4\20\0\3\4\4\0\5\4\1\u0122"+
    "\23\4\20\0\3\4\4\0\3\4\1\u0123\25\4\20\0"+
    "\3\4\4\0\13\4\1\u0124\15\4\20\0\3\4\4\0"+
    "\3\4\1\u0125\25\4\20\0\3\4\4\0\23\4\1\u0126"+
    "\5\4\20\0\3\4\4\0\12\4\1\u0127\4\4\1\u0128"+
    "\11\4\20\0\3\4\4\0\5\4\1\u0129\23\4\20\0"+
    "\3\4\4\0\3\4\1\u012a\25\4\20\0\3\4\4\0"+
    "\6\4\1\u012b\22\4\20\0\3\4\4\0\5\4\1\u012c"+
    "\23\4\20\0\3\4\4\0\1\u012d\30\4\20\0\3\4"+
    "\4\0\20\4\1\u012e\10\4\20\0\3\4\4\0\1\u012f"+
    "\30\4\20\0\3\4\4\0\6\4\1\u0130\22\4\20\0"+
    "\3\4\4\0\1\u0131\30\4\20\0\3\4\4\0\5\4"+
    "\1\u0132\23\4\20\0\3\4\4\0\20\4\1\u0133\10\4"+
    "\20\0\3\4\4\0\2\4\1\u0134\26\4\20\0\3\4"+
    "\4\0\5\4\1\u0135\23\4\20\0\3\4\4\0\3\4"+
    "\1\u0136\25\4\20\0\3\4\4\0\5\4\1\u0137\23\4"+
    "\20\0\3\4\4\0\5\4\1\u0138\23\4\20\0\3\4"+
    "\4\0\20\4\1\u0139\10\4\20\0\3\4\4\0\20\4"+
    "\1\u013a\10\4\20\0\3\4\4\0\15\4\1\u013b\13\4"+
    "\20\0\3\4\4\0\14\4\1\u013c\14\4\20\0\3\4"+
    "\4\0\13\4\1\u013d\15\4\20\0\3\4\4\0\15\4"+
    "\1\u013e\13\4\20\0\3\4\4\0\11\4\1\u013f\17\4"+
    "\20\0\3\4\4\0\1\u0140\30\4\20\0\3\4\4\0"+
    "\1\u0141\30\4\20\0\3\4\4\0\1\u0142\30\4\20\0"+
    "\3\4\4\0\13\4\1\u0143\15\4\20\0\3\4\4\0"+
    "\7\4\1\u0144\21\4\20\0\3\4\4\0\20\4\1\u0145"+
    "\10\4\20\0\3\4\4\0\3\4\1\u0146\25\4\20\0"+
    "\3\4\4\0\3\4\1\u0147\25\4\20\0\3\4\4\0"+
    "\20\4\1\u0148\10\4\20\0\3\4\4\0\10\4\1\u0149"+
    "\20\4\20\0\3\4\4\0\21\4\1\u014a\7\4\20\0"+
    "\3\4\4\0\3\4\1\u014b\25\4\20\0\3\4\4\0"+
    "\6\4\1\u014c\22\4\20\0\3\4\4\0\3\4\1\u014d"+
    "\25\4\20\0\3\4\4\0\20\4\1\u014e\10\4\20\0"+
    "\3\4\4\0\21\4\1\u014f\7\4\20\0\3\4\4\0"+
    "\6\4\1\u0150\22\4\20\0\3\4\4\0\3\4\1\u0151"+
    "\25\4\20\0\3\4\4\0\6\4\1\u0152\22\4\20\0"+
    "\3\4\4\0\4\4\1\u0153\24\4\20\0\3\4\4\0"+
    "\5\4\1\u0154\23\4\20\0\3\4\4\0\20\4\1\u0155"+
    "\10\4\20\0\3\4\4\0\5\4\1\u0156\23\4\20\0"+
    "\3\4\4\0\3\4\1\u0157\25\4\20\0\3\4\4\0"+
    "\6\4\1\u0158\22\4\20\0\3\4\4\0\6\4\1\u0159"+
    "\22\4\20\0\3\4\4\0\6\4\1\u015a\22\4\20\0"+
    "\3\4\4\0\11\4\1\u015b\17\4\20\0\3\4\4\0"+
    "\6\4\1\u015c\22\4\20\0\3\4\4\0\6\4\1\u015d"+
    "\22\4\20\0\3\4\4\0\15\4\1\u015e\13\4\20\0"+
    "\3\4\4\0\15\4\1\u015f\13\4\20\0\3\4\4\0"+
    "\5\4\1\u0160\23\4\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12624];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\22\1\17\11\1\1\1\0"+
    "\65\1\1\0\101\1\1\11\276\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[352];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MiLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public MiLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 120) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 98: 
          { return new Token(TokenConstant.PROTECTED, yytext());
          }
        case 100: break;
        case 91: 
          { return new Token(TokenConstant.OPERATOR, yytext());
          }
        case 101: break;
        case 68: 
          { return new Token(TokenConstant.SIZEOF, yytext());
          }
        case 102: break;
        case 86: 
          { return new Token(TokenConstant.ABSTRACT, yytext());
          }
        case 103: break;
        case 76: 
          { return new Token(TokenConstant.DOUBLE, "var");
          }
        case 104: break;
        case 82: 
          { return new Token(TokenConstant.VIRTUAL, yytext());
          }
        case 105: break;
        case 56: 
          { return new Token(TokenConstant.CLASS, yytext());
          }
        case 106: break;
        case 28: 
          { return new Token(TokenConstant.TRY, yytext());
          }
        case 107: break;
        case 94: 
          { return new Token(TokenConstant.DELEGATE, yytext());
          }
        case 108: break;
        case 3: 
          { return new Token(TokenConstant.ID, yytext());
          }
        case 109: break;
        case 63: 
          { return new Token(TokenConstant.WHILE, yytext());
          }
        case 110: break;
        case 58: 
          { return new Token(TokenConstant.USING, yytext());
          }
        case 111: break;
        case 53: 
          { return new Token(TokenConstant.THROW, yytext());
          }
        case 112: break;
        case 78: 
          { return new Token(TokenConstant.PUBLIC, yytext());
          }
        case 113: break;
        case 61: 
          { return new Token(TokenConstant.FIXED, yytext());
          }
        case 114: break;
        case 50: 
          { return new Token(TokenConstant.BREAK, yytext());
          }
        case 115: break;
        case 25: 
          { return new Token(TokenConstant.IN, yytext());
          }
        case 116: break;
        case 4: 
          { return new Token(TokenConstant.DIV, yytext());
          }
        case 117: break;
        case 99: 
          { return new Token(TokenConstant.STACKALLOC, yytext());
          }
        case 118: break;
        case 7: 
          { return new Token(TokenConstant.PLUS, yytext());
          }
        case 119: break;
        case 65: 
          { return new Token(TokenConstant.STRING, yytext());
          }
        case 120: break;
        case 5: 
          { /*Ignore*/
          }
        case 121: break;
        case 36: 
          { return new Token(TokenConstant.BOOL, "var");
          }
        case 122: break;
        case 69: 
          { return new Token(TokenConstant.SWITCH, yytext());
          }
        case 123: break;
        case 60: 
          { return new Token(TokenConstant.FALSE, yytext());
          }
        case 124: break;
        case 97: 
          { return new Token(TokenConstant.UNCHECKED, yytext());
          }
        case 125: break;
        case 24: 
          { return new Token(TokenConstant.IS, yytext());
          }
        case 126: break;
        case 40: 
          { return new Token(TokenConstant.CASE, yytext());
          }
        case 127: break;
        case 93: 
          { return new Token(TokenConstant.IMPLICIT, yytext());
          }
        case 128: break;
        case 67: 
          { return new Token(TokenConstant.SEALED, yytext());
          }
        case 129: break;
        case 6: 
          { return new Token(TokenConstant.MULT, yytext());
          }
        case 130: break;
        case 70: 
          { return new Token(TokenConstant.TYPEOF, yytext());
          }
        case 131: break;
        case 51: 
          { return new Token(TokenConstant.SBYTE, "var");
          }
        case 132: break;
        case 47: 
          { return new Token(TokenConstant.LOCK, yytext());
          }
        case 133: break;
        case 15: 
          { return new Token(TokenConstant.T_POINTS, yytext());
          }
        case 134: break;
        case 48: 
          { return new Token(TokenConstant.LONG, "var");
          }
        case 135: break;
        case 83: 
          { return new Token(TokenConstant.FOREACH, yytext());
          }
        case 136: break;
        case 72: 
          { return new Token(TokenConstant.EXTERN, yytext());
          }
        case 137: break;
        case 64: 
          { return new Token(TokenConstant.STATIC, yytext());
          }
        case 138: break;
        case 57: 
          { return new Token(TokenConstant.EVENT, yytext());
          }
        case 139: break;
        case 29: 
          { return new Token(TokenConstant.REF, yytext());
          }
        case 140: break;
        case 71: 
          { return new Token(TokenConstant.RETURN, yytext());
          }
        case 141: break;
        case 45: 
          { return new Token(TokenConstant.UINT, "var");
          }
        case 142: break;
        case 34: 
          { return new Token(TokenConstant.MULTI_COMMENT, yytext());
          }
        case 143: break;
        case 87: 
          { return new Token(TokenConstant.READONLY, yytext());
          }
        case 144: break;
        case 73: 
          { return new Token(TokenConstant.OBJECT, "var");
          }
        case 145: break;
        case 11: 
          { return new Token(TokenConstant.EQUAL, yytext());
          }
        case 146: break;
        case 59: 
          { return new Token(TokenConstant.ULONG, "var");
          }
        case 147: break;
        case 27: 
          { return new Token(TokenConstant.DO, yytext());
          }
        case 148: break;
        case 19: 
          { return new Token(TokenConstant.LL_C, yytext());
          }
        case 149: break;
        case 31: 
          { return new Token(TokenConstant.NEW, yytext());
          }
        case 150: break;
        case 35: 
          { return new Token(TokenConstant.BASE, yytext());
          }
        case 151: break;
        case 81: 
          { return new Token(TokenConstant.DEFAULT, yytext());
          }
        case 152: break;
        case 9: 
          { return new Token(TokenConstant.MIN, yytext());
          }
        case 153: break;
        case 79: 
          { return new Token(TokenConstant.CHECKED, yytext());
          }
        case 154: break;
        case 42: 
          { return new Token(TokenConstant.ENUM   , yytext());
          }
        case 155: break;
        case 33: 
          { return new Token(TokenConstant.FOR, yytext());
          }
        case 156: break;
        case 89: 
          { return new Token(TokenConstant.EXPLICIT, yytext());
          }
        case 157: break;
        case 52: 
          { return new Token(TokenConstant.SHORT, "var");
          }
        case 158: break;
        case 20: 
          { return new Token(TokenConstant.QUOTE, yytext());
          }
        case 159: break;
        case 22: 
          { return new Token(TokenConstant.SIMPLE_COMMENT, "\'\'\'"+yytext()+"\'\'\'");
          }
        case 160: break;
        case 41: 
          { return new Token(TokenConstant.CHAR, "var");
          }
        case 161: break;
        case 90: 
          { return new Token(TokenConstant.OVERRIDE, yytext());
          }
        case 162: break;
        case 88: 
          { return new Token(TokenConstant.CONTINUE, yytext());
          }
        case 163: break;
        case 43: 
          { return new Token(TokenConstant.ELSE, yytext());
          }
        case 164: break;
        case 85: 
          { return new Token(TokenConstant.PRIVATE, yytext());
          }
        case 165: break;
        case 2: 
          { return new Token(TokenConstant.DIGIT, yytext());
          }
        case 166: break;
        case 17: 
          { return new Token(TokenConstant.P_C, yytext());
          }
        case 167: break;
        case 39: 
          { return new Token(TokenConstant.THIS, yytext());
          }
        case 168: break;
        case 55: 
          { return new Token(TokenConstant.CONST, yytext());
          }
        case 169: break;
        case 32: 
          { return new Token(TokenConstant.INT, "var");
          }
        case 170: break;
        case 23: 
          { return new Token(TokenConstant.AS, yytext());
          }
        case 171: break;
        case 18: 
          { return new Token(TokenConstant.LL_A, yytext());
          }
        case 172: break;
        case 1: 
          { return new Token(TokenConstant.ERROR, yytext());
          }
        case 173: break;
        case 13: 
          { return new Token(TokenConstant.SEMI_COLON, yytext());
          }
        case 174: break;
        case 66: 
          { return new Token(TokenConstant.STRUCT, yytext());
          }
        case 175: break;
        case 8: 
          { return new Token(TokenConstant.LESS, yytext());
          }
        case 176: break;
        case 16: 
          { return new Token(TokenConstant.P_A, yytext());
          }
        case 177: break;
        case 46: 
          { return new Token(TokenConstant.VOID, yytext());
          }
        case 178: break;
        case 95: 
          { return new Token(TokenConstant.NAMESPACE, yytext());
          }
        case 179: break;
        case 49: 
          { return new Token(TokenConstant.GOTO, yytext());
          }
        case 180: break;
        case 10: 
          { return new Token(TokenConstant.GREATER, yytext());
          }
        case 181: break;
        case 44: 
          { return new Token(TokenConstant.NULL, yytext());
          }
        case 182: break;
        case 77: 
          { return new Token(TokenConstant.PARAMS, yytext());
          }
        case 183: break;
        case 38: 
          { return new Token(TokenConstant.TRUE, yytext());
          }
        case 184: break;
        case 30: 
          { return new Token(TokenConstant.OUT, yytext());
          }
        case 185: break;
        case 84: 
          { return new Token(TokenConstant.FINALLY, yytext());
          }
        case 186: break;
        case 26: 
          { return new Token(TokenConstant.IF, yytext());
          }
        case 187: break;
        case 75: 
          { return new Token(TokenConstant.UNSAFE, yytext());
          }
        case 188: break;
        case 21: 
          { return new Token(TokenConstant.S_QUOTE, yytext());
          }
        case 189: break;
        case 62: 
          { return new Token(TokenConstant.FLOAT, "var");
          }
        case 190: break;
        case 80: 
          { return new Token(TokenConstant.DECIMAL, "var");
          }
        case 191: break;
        case 54: 
          { return new Token(TokenConstant.CATCH, yytext());
          }
        case 192: break;
        case 14: 
          { return new Token(TokenConstant.POINT, yytext());
          }
        case 193: break;
        case 37: 
          { return new Token(TokenConstant.BYTE, "var");
          }
        case 194: break;
        case 74: 
          { return new Token(TokenConstant.USHORT, "var");
          }
        case 195: break;
        case 12: 
          { return new Token(TokenConstant.COMA, yytext());
          }
        case 196: break;
        case 92: 
          { return new Token(TokenConstant.INTERNAL, yytext());
          }
        case 197: break;
        case 96: 
          { return new Token(TokenConstant.INTERFACE, yytext());
          }
        case 198: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {     
    return new Token(TokenConstant.EOF, null);

 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
